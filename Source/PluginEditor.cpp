/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "CustomLookAndFeel.h"


//==============================================================================
ChuckPluginTest4AudioProcessorEditor::ChuckPluginTest4AudioProcessorEditor (ChuckPluginTest4AudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{
    LookAndFeel::setDefaultLookAndFeel(new CustomLookAndFeel());
    
    // This is where our plugin's editor size is set.
    setSize (600, 700);
    addAndMakeVisible(addAllShredsButton=new TextButton("Add All Shreds"));
    addAllShredsButton->setBounds(2, 2, 80,80 );
    addAllShredsButton->setButtonText("+ All Shreds");
    addAllShredsButton->addListener(this);
    
    addAndMakeVisible(removeShredButton=new TextButton("Remove Shred"));
    removeShredButton->setBounds(84, 2, 80,80 );
    removeShredButton->setButtonText("- All Shreds");
    removeShredButton->addListener(this);
    
    //addAndMakeVisible(browseCodeButton=new TextButton("Browse Code"));
    //browseCodeButton->setButtonText("Browse Code");
    //browseCodeButton->setBounds(120, 120, 100,100 );
    //browseCodeButton->addListener(this);
    
    addAndMakeVisible(addFileContainerButton=new TextButton("Add Code Editor"));
    addFileContainerButton->setBounds(166, 2, 80,80 );
    addFileContainerButton->setButtonText("+ Code Editor");
    addFileContainerButton->addListener(this);
    
    
    addAndMakeVisible(managerUI=new FileContainerManagerUI(getProcessor()->getFileContainerManagerModel()));
    managerUI->setBounds(0,90, getWidth(), getHeight()-90);
    managerUI->init();
    
    //lastFileLoaded=getProcessor()->fileManager.fileName;
    
    startTimer(50);
    timerCallback();
}

ChuckPluginTest4AudioProcessorEditor::~ChuckPluginTest4AudioProcessorEditor()
{
}

//==============================================================================
void ChuckPluginTest4AudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

}

void ChuckPluginTest4AudioProcessorEditor::buttonClicked(Button *buttonThatWasPressed)
{
    if (buttonThatWasPressed==addAllShredsButton)
    {
        getProcessor()->getFileContainerManagerModel()->addAllShreds();
    }
    
    if (buttonThatWasPressed==removeShredButton)
    {
        getProcessor()->removeShred();
    }
    
    if (buttonThatWasPressed==addFileContainerButton)
    {
        getProcessor()->getFileContainerManagerModel()->addFileContainer();
        managerUI->init();
    }
        
    
    
    //if (buttonThatWasPressed==browseCodeButton) {
    //    getProcessor()->fileManager.openBrowser();
    //    lastFileLoaded=getProcessor()->fileManager.fileName;
    //}
}

void ChuckPluginTest4AudioProcessorEditor::timerCallback()
{
    
}

void ChuckPluginTest4AudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    
}
